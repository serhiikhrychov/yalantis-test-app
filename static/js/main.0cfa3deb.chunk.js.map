{"version":3,"sources":["Components/User.jsx","Components/UsersList.jsx","Components/ChangedArray.jsx","Components/BirthWindow.jsx","App.js","index.js"],"names":["User","props","useState","radioButton","setRadioButton","className","classNames","active","id","user","dob","firstName","lastName","map","buttonState","i","type","value","name","checked","onChange","e","currentActiveUsers","activeUsers","filter","activeUser","target","updateActiveUsers","onUserSelect","UsersList","char","list","length","alphabet","Array","from","x","String","fromCharCode","ChangedArray","users","transArray","reduce","acc","push","WorkWithArray","ConvertTime","time","Date","toLocaleString","day","month","year","BirthWindow","Math","random","App","birthData","updBirthData","useEffect","fetch","then","response","json","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cfa3deb.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport '../Styles/User.css';\r\n\r\nfunction User(props) {\r\n  const buttons = ['Active', 'Not Active'];\r\n  const [radioButton, setRadioButton] = useState('Not Active');\r\n\r\n  // work with user array according to radiobutton\r\n  const onUserSelect = (e, buttonState) => {\r\n    const currentActiveUsers =\r\n      buttonState === 'Active'\r\n        ? [...props.activeUsers, props.user]\r\n        : props.activeUsers.filter(\r\n            (activeUser) => activeUser.id !== props.user.id\r\n          );\r\n    setRadioButton(e.target.value);\r\n    // array of active users (from app js)\r\n    props.updateActiveUsers(currentActiveUsers);\r\n  };\r\n\r\n  return (\r\n    <div className={classNames('user', { active: radioButton === 'Active' })}>\r\n      <h5 id={props.user.dob}>\r\n        {props.user.firstName + ' ' + props.user.lastName}\r\n      </h5>\r\n      {buttons.map((buttonState, i) => {\r\n        return (\r\n          <div key={i}>\r\n            <input\r\n              className=\"radioButton\"\r\n              type={'radio'}\r\n              value={buttonState}\r\n              name={`radioBtn-${props.user.id}`}\r\n              checked={radioButton === buttonState}\r\n              onChange={(e) => onUserSelect(e, buttonState)}\r\n            />\r\n            <b>{buttonState}</b>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from './User';\r\nimport '../Styles/UsersList.css';\r\n\r\nfunction UsersList(props) {\r\n  return (\r\n    <div className=\"char\">\r\n      <h2>{props.char}</h2>\r\n      {props.list.length === 0 ? (\r\n        <div>\r\n          <i className=\"noEmployees\">No employees</i>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {props.list.map((user) => (\r\n            <User\r\n              user={user}\r\n              key={user.id}\r\n              updateActiveUsers={props.updateActiveUsers}\r\n              activeUsers={props.activeUsers}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UsersList;\r\n","import React from 'react';\r\nimport UsersList from './UsersList';\r\n\r\nfunction WorkWithArray(users) {\r\n  let data = users.reduce((acc, user) => {\r\n    // get first letter of name of current element\r\n    let alphabet = user.firstName[0];\r\n\r\n    // if there is no property in accumulator with this letter create it\r\n    if (!acc[alphabet]) acc[alphabet] = [user];\r\n    // if there is push current element to children array for that letter\r\n    else acc[alphabet].push(user);\r\n\r\n    // return accumulator\r\n    return acc;\r\n  }, {});\r\n\r\n  return data;\r\n}\r\n// construct alphabet\r\nconst alpha = Array.from(Array(26)).map((e, i) => i + 65);\r\nconst alphabet = alpha.map((x) => String.fromCharCode(x));\r\n// create array of users\r\nconst ChangedArray = ({ users, updateActiveUsers, activeUsers }) => {\r\n  const transArray = WorkWithArray(users);\r\n  return alphabet.map((char) => (\r\n    <UsersList\r\n      char={char}\r\n      list={transArray[char] || []}\r\n      key={char}\r\n      activeUsers={activeUsers}\r\n      updateActiveUsers={updateActiveUsers}\r\n    />\r\n  ));\r\n};\r\n\r\nexport default ChangedArray;\r\n","import React from 'react';\r\nimport '../Styles/BirthWindow.css';\r\n\r\nfunction ConvertTime(time) {\r\n  const date = new Date(time);\r\n  return date.toLocaleString('en-GB', {\r\n    day: '2-digit',\r\n    month: 'long',\r\n    year: 'numeric',\r\n  });\r\n}\r\n\r\nfunction GetMonth(time) {\r\n  const date = new Date(time);\r\n  return date.toLocaleString('default', { month: 'long' });\r\n}\r\n\r\nfunction BirthWindow({ activeUsers }) {\r\n  return (\r\n    <div className=\"birthdayWindow\">\r\n      <h3>Employees birthday</h3>\r\n      {activeUsers.map((user) => (\r\n        <ul id=\"birthList\" key={user.id + Math.random()}>\r\n          {GetMonth(user.dob)}\r\n          <li>\r\n            {user.firstName} {user.lastName} - {ConvertTime(user.dob) + ' year'}\r\n          </li>\r\n        </ul>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BirthWindow;\r\n","// import { UserList } from './UserList';\nimport ChangedArray from './Components/ChangedArray';\nimport BirthWindow from './Components/BirthWindow';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [birthData, updBirthData] = useState([]);\n  const [activeUsers, updateActiveUsers] = useState([]);\n\n  useEffect(() => {\n    fetch('https://yalantis-react-school-api.yalantis.com/api/task0/users')\n      .then((response) => response.json())\n      .then(updBirthData);\n  }, []);\n\n  // Work with local storage\n  // React.useEffect(() => {\n  //   const data = localStorage.getItem('my-active-user-list');\n  //\n  //   if (data) {\n  //     updateActiveUsers(JSON.parse(data));\n  //   }\n  // }, []);\n  //\n  // React.useEffect(() => {\n  //   localStorage.setItem('my-active-user-list', JSON.stringify(activeUsers));\n  // });\n\n  // TODO useEffect for radio buttons\n\n  return (\n    <div>\n      <ChangedArray\n        users={birthData}\n        activeUsers={activeUsers}\n        updateActiveUsers={updateActiveUsers}\n      />\n      <BirthWindow activeUsers={activeUsers} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}